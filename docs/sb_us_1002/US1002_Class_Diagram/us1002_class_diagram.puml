@startuml US1002_class_diagram
'https://plantuml.com/class-diagram

title US1002 Class Diagram



class EntityListDTOService <<service>> {
+ convertToDTO(List<Entity> customersList)
}


class EntityManagementService <<service>> {
+ getAssignedCustomerCodesList(Email username)


}

interface AbstractUI{
# doShow()
}

class RegisterJobOpeningUI <<Presentation>> {
+ doShow()
}


class RegisterJobOpeningController <<Application>> {
+ getCustomersList()
+ getContractTypesList()
+ getWorkModesList()
+ getRequirementsSpecificationsList()
+ registerJobOpening(String function, String contractTypeDenomination,\n String workModeDenomination, String streetName, String city, String district, state,\n Integer zipcode, Integer numVacancies, String description, String requirementsFileName)
}

class JobOpeningManagementService <<service>> {
+ registerJobOpening(streetName, city, district, state, zipcode,\n function, contractTypeDenomination, workModeDenomination,\n customerCode, numVacancies, description, requirementsSpecificationsFile)
}


'Requirements
class RequirementSpecification <<Domain>> <<Aggregate Root>> {
- fileName : String
+ requirementsFileName()
+ toDto()
}

class AuthorizationService <<Application>> <<Service>> {
+ loggedinUserWithPermissions(final Role... actions BaseRole.CUSTOMER_MANAGER)
}

'Address
class Address <<Domain>> <<Value Object>> {
- String streetName
- String city
- String district
- String state
- String zipcode
+ valueOf()
+ create(city, district, state, zipcode)
}

'Job Opening
class JobOpening <<Domain>> <<Aggregate Root>> {
- String function
- ContractType contractType
- WorkMode workMode
- Address jobOpeningAddress
- String jobReference
- Integer numVacancies
- String description
- File requirementsSpecificationsFile
+ jobReference(String lastJobReference)
+ create(function, contractTypeDenomination, workModeDenomination,\n streetName, city, district, state, zipcode, customerCode, numVacancies,\n description, requirementsSpecificationsFile)
}

class WorkMode <<Domain>> <<Value Object>> {
- String workModeDenomination
+ valueOf(String workModeDenomination)
+ mode()
+ toDTO()
}

class ContractType <<Domain>> <<Value Object>> {
- String contractTypeDenomination
+ valueOf(String contractTypeDenomination)
+ type()
+ toDTO()
}

class JobOpeningRepository <<Persistence>> <<Repository>> {
+ save(JobOpening entity)
+ lastJobReference(String customerCode)
}

class WorkModesRepository <<Persistence>> <<Repository>> {
+ save(WorkMode: entity)
+ getWorkModes()
}

class ContractTypesRepository <<Persistence>> <<Repository>> {
+ save(ContractType: entity)
+ getContractTypes()
}

class RequirementsSpecificationsRepository <<Persistence>> <<Repository>> {
+ save(RequirementSpecification: entity)
+ getCustomerRequirementsSpecificationsFileList(String customerCode)
+ getFileByName(String requirementsFileName)
}

class EntityRepository  <<Persistence>> <<Repository>>  {
+ save(Entity: entity)
+ getCustomersByUsername(Email username)
}

interface DomainRepository <<Persistence>> {
+ save(Entity: Entity)
}


'Associations
'Basic Flow
RegisterJobOpeningUI ..> RegisterJobOpeningController
RegisterJobOpeningController ...> RequirementsSpecificationsRepository
RegisterJobOpeningController ...> WorkModesRepository
RegisterJobOpeningController ...> ContractTypesRepository
RegisterJobOpeningController ..> JobOpeningRepository
RegisterJobOpeningController ..> EntityManagementService
RegisterJobOpeningController ..> JobOpeningManagementService
RegisterJobOpeningUI ..> EntityListDTOService

'Domain Layer
Address "1" <-up- "*" JobOpening : is located at
WorkMode "1" --> "*" JobOpening : characterizes
ContractType "1" --> "*" JobOpening  : characterizes
RequirementSpecification "*" --> "1" JobOpening : specifies
RegisterJobOpeningController ..> ContractType
RegisterJobOpeningController ..> WorkMode
RegisterJobOpeningController ..> RequirementSpecification


'Persistence Layer
ContractTypesRepository --> ContractType : aggregates
WorkModesRepository --> WorkMode : aggregates
JobOpeningRepository <.. JobOpening : persisted by
RequirementsSpecificationsRepository -> RequirementSpecification : aggregates
EntityManagementService ---> EntityRepository
EntityManagementService --> EntityListDTOService
JobOpeningManagementService --> JobOpeningRepository
JobOpeningManagementService --> JobOpening

'Interface implementation
DomainRepository <|.. JobOpeningRepository : implements
DomainRepository <|.. ContractTypesRepository : implements
DomainRepository <|.. WorkModesRepository : implements
DomainRepository <|.. RequirementsSpecificationsRepository : implements
DomainRepository <|.. EntityRepository : implements
AbstractUI <|.. RegisterJobOpeningUI : implements

'Authentication
AuthorizationService ..> RegisterJobOpeningController

@enduml
@startuml US1002_class_diagram
'https://plantuml.com/class-diagram

title US1002 Class Diagram

'DTO
'package <<DTO>> {
class JobOpeningMapper {
+ convertToDTO(className, list)
}

class JobOpeningDTO {
+ create(e: element)
}
'}


'package <<Presentation>> {
class RegisterJobOpeningUI <<Presentation>> {
+ doShow()
}
'}

'package <<Application>> {
class RegisterJobOpeningController <<Application>> {
+ getJobOpeningContractTypesList()
+ getJobOpeningWorkModesList()
+ getJobOpeningRequirementsSpecificationsList()
+ registerJobOpening(function, contractType, workMode,\nstreetName, city, district, state, zipcode, companyName,\nnumVacancies, description, requirementsFileName)
+ toDTO(className, listToDisplay)
}
'}


'package <<Domain>> {
'Requirements
class RequirementSpecification <<Domain>> <<Aggregate Root>> {
- fileName : String
+ requirementsFileName()
}

'Address
class AddressFactory <<Domain>> <<Factory>> {
create(streetName, city, district, state, zipcode) : Address
}
class Address <<Domain>> <<Value Object>> {
- String streetName
- String city
- String district
- String state
- String zipcode
+ valueOf()
}

'Job Opening
class JobOpeningFactory <<Domain>> <<Factory>> {
+ create(function, contractType, workMode, companyAddress,\ncostumerCode, companyName, numVacancies, description,\nrequirementsSpecificationsFile) : JobOpening
+ getJobReference(lastJobReference)
}
class JobOpening <<Domain>> <<Aggregate Root>> {
- function : String
- contractType : ContractType
- workMode : WorkMode
- companyAddress : Address
- costumerCode : String
- companyName : String
- numVacancies : Integer
- description : String
- requirementsSpecificationsFile : File
}

class WorkMode <<Domain>> <<Value Object>> {
- workModeDenomination: String
+ valueOf()
+ mode()
}

class ContractType <<Domain>> <<Value Object>> {
- contractTypeDenomination : String
+ valueOf()
+ type()
}
'}

'package <<Persistence>> {
class JobOpeningRepository <<Persistence>> <<Repository>> {
+ save(JobOpening: entity)
+ getContractTypes()
+ getWorkModes()
+ getCostumerLastJobReference(costumerCode)

}

class CostumerRepository <<Persistence>> <<Repository>> {
+ save(Costumer: entity)
+ getCostumerCodeByCompanyName(companyName)
}

class RequirementsSpecificationsRepository <<Persistence>> <<Repository>> {
+ save(Requirement: entity)
+ getCostumerRequirementsSpecificationsFileList(costumerCode)
}

interface EntityRepository <<**Interface**>> {
+ save(e: Entity)
}
'}

'Associations
'Basic Flow
RegisterJobOpeningUI ..> RegisterJobOpeningController
RegisterJobOpeningController ...> RequirementsSpecificationsRepository
RegisterJobOpeningController .> CostumerRepository
RegisterJobOpeningController ..> JobOpeningRepository
RegisterJobOpeningController ..> JobOpeningFactory
RegisterJobOpeningController ..> AddressFactory

'Domain Layer
JobOpeningFactory "1" --> "*" JobOpening : creates
AddressFactory "1" --> "*" Address : produces
Address "1" --> "*" JobOpening : locates
WorkMode "1" --> "*" JobOpening : characterizes
ContractType "1" --> "*" JobOpening  : characterizes
RequirementSpecification "*" --> "1" JobOpening : specifies

'Persistence Layer
JobOpeningRepository "1" --> "*" ContractType : rebuilds
JobOpeningRepository "1" --> "*" WorkMode : rebuilds
JobOpeningRepository <.. JobOpening : persisted by
RequirementsSpecificationsRepository "1" -> "*" RequirementSpecification : aggregates

'Interface implementation
EntityRepository <|.. JobOpeningRepository : implements
EntityRepository <|.. CostumerRepository : implements
EntityRepository <|.. RequirementsSpecificationsRepository : implements

'DTO
JobOpeningMapper ..> JobOpeningDTO
RegisterJobOpeningController ..left> JobOpeningMapper
JobOpeningMapper ..> ContractType
JobOpeningMapper ..> WorkMode
JobOpeningMapper ..> RequirementSpecification
RegisterJobOpeningUI ..> JobOpeningDTO

@enduml
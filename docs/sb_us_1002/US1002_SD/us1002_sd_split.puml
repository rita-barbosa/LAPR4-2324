@startuml US1002_SD_split
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Customer Manager" as CM
participant "<<presentation>>\nRegisterJobOpeningUI" as UI
participant "<<application>>\nRegisterJobOpeningController" as CTRL
participant "<<persistence>>\nPersistenceContext" as Persistence
participant "<<factory>>\nRepositoryFactory" as RepositorySingleton
participant "<<repository>>\nJobOpeningRepository" as JobOpeningRepository
participant "<<domain>>\nContractTypes\n(enum)" as ContractTypesEnum
participant "<<domain>>\nWorkModes\n(enum)" as WorkModesEnum
participant "<<repository>>\nCostumerRepository" as CostumerRepository
participant "<<repository>>\nRequirementsSpecificationsRepository" as RequirementsSpecificationsRepository
participant "<<factory>>\nAddressFactory" as AddressFactory
participant "<<domain>>\nAddress" as Address
participant "<<factory>>\nJobOpeningFactory" as JobOpeningFactory
participant "<<domain>>\nJobOpening" as JobOpening

activate CM

CM -> UI : asks to register a new job opening

activate UI

UI -> CTRL** : create()

UI --> CM : asks for the title/function

deactivate UI

CM -> UI : provides the title/function (function)

activate UI

UI -> CTRL : getJobOpeningContractTypesList()


'Getting the Contract Type
activate CTRL

    CTRL -> Persistence : getInstance()
    activate Persistence

        Persistence --> CTRL: repositories
    deactivate Persistence

    CTRL -> RepositorySingleton : getJobOpeningRepository()
    activate RepositorySingleton

        RepositorySingleton -> JobOpeningRepository** : create()

        RepositorySingleton --> CTRL: JobOpeningRepository
    deactivate RepositorySingleton

    CTRL -> JobOpeningRepository : getContractTypes()
    activate JobOpeningRepository
    
        JobOpeningRepository -> ContractTypesEnum : convertEnumToList()

        activate ContractTypesEnum

        ContractTypesEnum --> JobOpeningRepository : contractTypeList
        deactivate ContractTypesEnum

        JobOpeningRepository --> CTRL : contractTypeList
    deactivate JobOpeningRepository
|||
    CTRL -> CTRL : toDTO(contractTypeList)
    activate CTRL

        ref over CTRL
            Convert contract Type List to DTO
        end ref

    CTRL --> CTRL : contractTypeListDTO
    deactivate CTRL

    CTRL --> UI : contractTypeListDTO

deactivate CTRL

UI --> CM : shows the contract type list and asks to choose an option
deactivate UI

CM -> UI : selects the contract type (contractType)


'Getting the Work Mode
activate UI

UI -> CTRL : getJobOpeningWorkModesList()

activate CTRL

    CTRL -> JobOpeningRepository : getWorkModes()
    activate JobOpeningRepository
    
        JobOpeningRepository -> WorkModesEnum : convertEnumToList()

        activate WorkModesEnum

        WorkModesEnum --> JobOpeningRepository : workModeList
        deactivate WorkModesEnum

        JobOpeningRepository --> CTRL : workModeList
    deactivate JobOpeningRepository

|||
    CTRL -> CTRL : toDTO(workModeList)
    activate CTRL

        ref over CTRL
            Convert work mode list to DTO
        end ref

    CTRL --> CTRL : workModeListDTO
    deactivate CTRL

    CTRL --> UI : workModeListDTO
deactivate CTRL

UI --> CM : shows the work mode list and asks to choose an option
deactivate UI

CM -> UI : selects the work mode (workMode)

activate UI

UI --> CM : asks for the company's address
deactivate UI

CM -> UI : provides the company's address (streetName, city, district, state, zipcode)

activate UI

UI --> CM : asks for company's name
deactivate UI

CM -> UI : provides the company's name (companyName)

activate UI

UI --> CM : asks for the number of vacancies
deactivate UI

CM -> UI : provides the number of vacancies (numVacancies)

activate UI

UI --> CM : asks for a description
deactivate UI

CM -> UI : provides a description (description)

activate UI

UI -> CTRL : getJobOpeningRequirementsSpecificationsList()

'Getting Costumer ID
activate CTRL

    CTRL -> Persistence : getCostumerRepository()
    activate Persistence

        Persistence -> CostumerRepository** : create()

        Persistence --> CTRL : costumerRepository
    deactivate Persistence

    CTRL -> CostumerRepository : getCostumerCodeByCompanyName(companyName)

    activate CostumerRepository

    CostumerRepository --> CTRL : costumerCode
    deactivate CostumerRepository
|||
'Getting the Requirements Specification
    CTRL -> Persistence : getRequirementsSpecificationsRepository()
    activate Persistence

        Persistence -> RequirementsSpecificationsRepository** : create()

        Persistence --> CTRL: RequirementsSpecificationsRepository
    deactivate Persistence

'Getting the requirements specifications made for specified costumer
    CTRL -> RequirementsSpecificationsRepository : getCostumerRequirementsSpecificationsFileList(costumerCode)
    note left: The process of selecting the requirements specifications\n is not a responsibility of US1002, rather from US1009,\n which will be integrated in this functionality.
    activate RequirementsSpecificationsRepository

        RequirementsSpecificationsRepository --> CTRL : costumerRequirementsSpecificationsFileList
    deactivate RequirementsSpecificationsRepository
|||
    CTRL -> CTRL : toDTO(costumerRequirementsSpecificationsFileList)
    activate CTRL

        ref over CTRL
            Convert costumer requirements
            specifications file List to DTO
        end ref

    CTRL --> CTRL : costumerRequirementsSpecificationsFileListDTO
    deactivate CTRL

    CTRL --> UI : costumerRequirementsSpecificationsFileListDTO

deactivate CTRL

UI --> CM : shows the requirements specifications file list and asks to choose one
deactivate UI

CM -> UI : selects the requirements specifications file (requirementsFileName)

activate UI

UI --> CM : asks for the confirmation of the job opening's registration
deactivate UI

CM -> UI : confirms the registration of the job opening

activate UI

UI -> CTRL : registerJobOpening(function, contractType, workMode, streetName, city, district,\n state, zipcode, companyName, numVacancies, description, requirementsFileName)

'Register a new Job Opening
activate CTRL
|||
'Getting the requirements specifications file
    CTRL -> RequirementsSpecificationsRepository : getRequirementsSpecificationsFile(requirementsFileName)

    activate RequirementsSpecificationsRepository

    RequirementsSpecificationsRepository --> CTRL : requirementsSpecificationsFile
    deactivate RequirementsSpecificationsRepository
|||
'Generate new job reference (sequential)
    CTRL -> JobOpeningRepository : getCostumerLastJobReference(costumerCode)

    activate JobOpeningRepository

    JobOpeningRepository --> CTRL : lastJobReference
    deactivate JobOpeningRepository
|||
    CTRL -> JobOpeningFactory** : getJobReference(lastJobReference)
    note left: JobOpeningFactory does not have\n access to the previous job opening\n reference if it was made in another session

    activate JobOpeningFactory

    JobOpeningFactory -> JobOpeningFactory : generateJobReference(lastJobReference)

    JobOpeningFactory --> CTRL : newJobReference
    deactivate JobOpeningFactory
|||
'Address Encapsulation
    CTRL -> AddressFactory** : createCompanyAddress(streetName, city, district, state, zipcode)

    activate AddressFactory

    AddressFactory -> Address** : create(streetName, city,\n district, state, zipcode)

    AddressFactory --> CTRL : companyAddress
    deactivate AddressFactory

'Job Opening Encapsulation
    CTRL -> JobOpeningFactory : createJobOpening(function, contractType, workMode, companyAddress, costumerCode, companyName, numVacancies, description, requirementsSpecificationsFile)

    activate JobOpeningFactory

    JobOpeningFactory -> JobOpening** : create(function, contractType, workMode, companyAddress,\n costumerCode, companyName, numVacancies,\n description, requirementsSpecificationsFile)

    JobOpeningFactory --> CTRL : jobOpening
    deactivate JobOpeningFactory
|||
    CTRL -> JobOpeningRepository : save(jobOpening)

    activate JobOpeningRepository

    JobOpeningRepository --> CTRL : confirmation
    deactivate JobOpeningRepository

    CTRL --> UI : confirmation

deactivate CTRL


UI --> CM : confirms the successful registration of the job opening
deactivate UI


deactivate CM

@enduml
@startuml US1005_class_diagram
'https://plantuml.com/class-diagram

title US1005 Class Diagram

'DTO
'package <<DTO>> {
class JobOpeningMapper {
+ convertToDTO(jobOpeningList)
}

class JobOpeningDTO {
+ create(e: element)
}

class ApplicationMapper {
+ convertToDTO(applicationList)
}

class ApplicationDTO {
+ create(e: element)
}
'}


'package <<Presentation>> {
class ListJobOpeningApplicationsUI <<Presentation>> {
+ doShow()
}
'}

'package <<Application>> {
class ListJobOpeningApplicationsController <<Application>> {
+ getJobOpeningList()
+ getApplicationList()
+ toDTO(jobOpeningList)
+ toDTO(applicationList)
}
'}


'package <<Domain>> {
'Requirements
package <<Authentication_and_Users>> {
class AuthenticationService <<Application>> <<Service>> {
}
class Session <<Domain>> <<Value Object>> {}
class SystemUser <<Domain>> <<Aggregate Root>> {}
class Username <<Domain>> <<Value Object>> <<ID>> {
- value : String
}
}

class CostumerManager <<Domain>> <<Aggregate Root>> {}

class JobOpening <<Domain>> <<Aggregate Root>> {
- function : String
- contractType : ContractType
- workMode : WorkMode
- companyAddress : Address
- costumerCode : String
- companyName : String
- numVacancies : Integer
- description : String
- requirementsSpecificationsFile : File
+ create()
}

class WorkMode <<Domain>> <<Value Object>> {
- workModeDenomination: String
+ valueOf()
+ mode()
}

class ContractType <<Domain>> <<Value Object>> {
- contractTypeDenomination : String
+ valueOf()
+ type()
}

class Application <<Domain>> <<Aggregate Root>> {
- requirementAnswer : String
- requirementResult : Integer
- file : File
- email : String
- applicationDate : Date
- applicationStatus : Boolean
- candidateName : String
- phoneNumber : Integer
- interview : Interview
}

class Interview <<Domain>> <<Value Object>> {
- interviewTypeDenomination : String
- schedule : Date
- interviewResult : String
- interviewGrade : Integer
- justification : String
- interviewAnswer :  String
+ valueOf()
}

'package <<Persistence>> {
class JobOpeningRepository <<Persistence>> <<Repository>> {
+ getJobOpeningList()
}

class ApplicationRepository <<Persistence>> <<Repository>> {
+ save(Application: entity)
+ getApplicationList(jobOpening)
}

interface RepositoryDatabase <<Persistence>> {
+ save(Entity: Entity)
}


'}

'Associations
'Basic Flow
CostumerManager ..> ListJobOpeningApplicationsController
ListJobOpeningApplicationsUI ..> ListJobOpeningApplicationsController
ListJobOpeningApplicationsController ..> JobOpeningRepository
ListJobOpeningApplicationsController ..> ApplicationRepository

'Domain Layer
'JobOpeningFactory "1" --> "*" JobOpening : creates
'AddressFactory "1" --> "*" Address : produces
'Address "1" --> "*" JobOpening : locates
WorkMode "1" --> "*" JobOpening : characterizes
ContractType "1" --> "*" JobOpening  : characterizes


''Persistence Layer
JobOpeningRepository "1" --> "*" ContractType : rebuilds
JobOpeningRepository "1" --> "*" WorkMode : rebuilds
JobOpeningRepository <.. JobOpening : persisted by

ApplicationRepository <.. Application : persisted by
ApplicationRepository "1" --> "*" Interview : rebuilds

'RequirementsSpecificationsRepository "1" -> "*" RequirementSpecification : aggregates
'
''Interface implementation
RepositoryDatabase <|.. JobOpeningRepository : implements
RepositoryDatabase <|.. ApplicationRepository : implements


''DTO
JobOpeningMapper ..> JobOpeningDTO
ApplicationMapper ..> ApplicationDTO
ApplicationMapper ..> Application
ListJobOpeningApplicationsController ..> ApplicationMapper
ListJobOpeningApplicationsController ...> JobOpeningMapper
JobOpeningMapper ..> ContractType
JobOpeningMapper ..> WorkMode
ApplicationMapper ..> Interview
ListJobOpeningApplicationsUI ..> JobOpeningDTO
ListJobOpeningApplicationsUI ..> ApplicationDTO

'Authentication
Session --> SystemUser
SystemUser -> Username
AuthenticationService ..> Username
AuthenticationService ..> Session
AuthenticationService ..> ListJobOpeningApplicationsController
CostumerManager --|> SystemUser

@enduml
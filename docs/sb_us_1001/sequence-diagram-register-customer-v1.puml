@startuml
autonumber


actor "Customer Manager" as USER

participant "RegisterCustomerUI" as UI <<presentation>>
participant "RegisterCustomerController" as CTRL <<controller>>
participant "GeneratePasswordService" as GPS <<service>>
participant "RandomPassword" as PG <<domain>>
participant "AuthorizationService" as AUTHZ <<service>>
participant "Entity" as ENTITY <<domain>>
participant "EntityRepository" as ER <<repository>>
participant "EventPublisher" as EP <<domain>>
participant "NewEntity\nRegisteredEvent" as EVENT <<domain>>
participant "NewEntityRegistered\nWatchDog" as WD <<domain>>
participant "NewEntityUser\nRegisteredWatchDog" as WD_2 <<domain>>
participant "AddUserOnNewEntity\nRegisteredController" as CTRL_EVENT <<domain>>
participant "AddClientUserOnNew\nEntityRegisteredController" as CTRL_EVENT_2 <<domain>>
participant "UserRepository" as REPO <<repository>>
participant "NewEntityUser\nRegisteredEvent" as EVENT_2 <<domain>>
participant "ClientUser\nManagementService" as CUMS <<service>>
participant "UserManagementService" as UMS <<service>>



note right UMS
The UserManagementService and
AuthorizationService are implemented
in the eapli framework and will
be used in this functionality.
end note

activate USER

USER -> UI: wants to register new customer
activate UI

UI -> CTRL**: create



UI --> USER: asks for necessary information


USER -> UI: companyName, address, customerCode,\nuserEmail, userName, phoneNumber
UI -> CTRL: registerCustomer(companyName, address, customerCode,\nuserEmail, userName, phoneNumber)
activate CTRL

CTRL -> GPS: generatePassword()
activate GPS

GPS -> PG**: create()
activate PG

PG --> GPS: password
deactivate PG

GPS --> CTRL: password
deactivate GPS

CTRL -> AUTHZ:  loggedinUserWithPermissions(roles)
activate AUTHZ

AUTHZ --> CTRL:  customerManagerUser
deactivate AUTHZ

CTRL -> ENTITY**: create(companyName, address,\ncustomerCode, customerManageruser)
activate ENTITY

ENTITY --> CTRL: entity
deactivate ENTITY

CTRL -> ER: save(entity)
activate ER
deactivate ER





CTRL -> EVENT**: create(userEmail, userName, phoneNumber, password)


CTRL -> EP : publish
activate EP

EP -> WD: onEvent()
activate WD

WD -> CTRL_EVENT: addUser(newEntityRegisteredEvent)
activate CTRL_EVENT

CTRL_EVENT -> UMS: registerNewUser(email, password, name,email,  roles)
activate UMS

UMS --> CTRL_EVENT: user
deactivate UMS

CTRL_EVENT -> EVENT_2**: create(email, phoneNumber)

deactivate WD

CTRL_EVENT -> EP: publish()
deactivate CTRL_EVENT

EP -> WD_2: onEvent()
activate WD_2

WD_2 -> CTRL_EVENT_2: addClientUser(newEntityUserRegisteredEvent)
activate CTRL_EVENT_2

CTRL_EVENT_2 -> REPO : ofIdentity(email)
activate REPO

REPO --> CTRL_EVENT_2: user
deactivate REPO

CTRL_EVENT_2 -> CUMS: registerNewUser(user, phoneNumber)
activate CUMS

deactivate CUMS
deactivate CTRL_EVENT_2
deactivate WD_2
deactivate EP
deactivate CTRL_EVENT


CTRL --> UI: success
deactivate CTRL


UI --> USER: success

deactivate USER

@enduml

@startuml



abstract class AbstractUI {
    # doShow()
    # show()
    # mainLoop()
}

class AuthorizationService {
    + loggedinUserWithPermissions(roles)
}

class UserManagementService {
    + registerNewUser(email, password, name, email, roles)
}
class EntityManagementService {
    +  registerNewEntity(companyName, address, customerCode,\ncustomerManagerUser,email,password)
}

interface EventPublisher{
    + publish()
}
interface EventHandler{
    + onEvent()
}
interface DomainEvent{
    + occurredAt()
    + registeredAt()
}
interface DomainRepository{
+ save(entity)
}



class RegisterCustomerUI {

}

class RegisterCustomerController{
+ registerCustomer(companyName, address, customerCode,\nuserEmail, userName, phoneNumber)
}
class AddEntityOnNewCustomerUserRegisteredController{
+ registerEntity(newCustomerRegisteredEvent)
}
class GeneratePasswordService {
+ generatePassword(): RandomPassword
}

class RandomPassword{
- rawPassword
+ RandomPassword() : RandomPassword
- RandomPassword(int) : RandomPassword
}

class Entity{
+ Entity(companyName, address,\ncustomerCode, customerManageruser)
}


interface EntityRepository {
+ save(entity)
}
class CustomerCode <<(V,#FF8B40) value object>>  {
- code
+ CustomerCode(code)
}
class CompanyName <<(V,#FF8B40) value object>> {
- name
+ CompanyName(name)
}
class Address <<(V,#FF8B40) value object>> {
- streetName
- streetNumber
- postalCode
- district
- city
+ Address(streetName, streetNumber, postalCode, district, city)
}
class NewCustomerUserRegisteredEvent{
+ NewEntityRegisteredEvent(companyName, address, customerCode,\ncustomerManagerUser, customerUser)
}
abstract class DomainEventBase {
}
class NewCustomerUserRegisteredWatchDog{
}



AbstractUI <|-- RegisterCustomerUI
RegisterCustomerUI .-> RegisterCustomerController


NewCustomerUserRegisteredEvent --|> DomainEventBase
NewCustomerUserRegisteredEvent .--|> DomainEvent

NewCustomerUserRegisteredWatchDog .-up|> EventHandler
NewCustomerUserRegisteredWatchDog .--> AddEntityOnNewCustomerUserRegisteredController
EventPublisher .-> EventHandler
Entity --> CompanyName
Entity --> CustomerCode
Entity --> Address
EntityRepository .--> DomainRepository
EntityRepository --> Entity

RegisterCustomerController --> AuthorizationService
EntityManagementService -> UserManagementService
RegisterCustomerController ---> EntityManagementService
RegisterCustomerController ---> GeneratePasswordService
EntityManagementService --> NewCustomerUserRegisteredEvent
EntityManagementService .--> EventPublisher

GeneratePasswordService .--> RandomPassword
AddEntityOnNewCustomerUserRegisteredController .-up-> NewCustomerUserRegisteredEvent
AddEntityOnNewCustomerUserRegisteredController .-> Entity
AddEntityOnNewCustomerUserRegisteredController .-> EntityRepository





@enduml
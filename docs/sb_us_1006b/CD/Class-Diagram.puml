@startuml
'https://plantuml.com/class-diagram

skinparam groupInheritance 3

Class "<<Persistence>>\n<<Service>>\nListCandidateDataDTOService" as SERVICE {
    + listCandidateData(Email: email)
    + toDTO(Entity entity)
}
Class "<<Domain>>\n<<DTO>>\nCandidateDataDTO" as DTO {
    - Candidate: candidate
    - List<Applications>: allApplications
    ..
    + candidate()
    + applicationsOfCandidate()
    + toString()
}
Class "<<Domain>>\n<<Root Entity>>\nApplication" as A {
    - ApplicationDate: dateOfRegistration
    - ApplicationStatus: status
    - JobOpening: jobOpeningRelated
    ..
    + valueOfApplicationRegistrationDate()
    + valueOfApplicationStatus()
    + valueOfJobOpeningReference()
    + toString()
}
Class "<<Domain>>\n<<Root Entity>>\nJobOpening" as J {
    - JobReference: ref
    ..
    + valueOfJobRef()
    + toString()
}
Class "<<Domain>>\n<<Value Object>>\nApplicationDate" as ADATE {
    - LocalDate: dateOfRegistration
    ..
    + dateOfRegistration()
    + toString()
}
Class "<<Domain>>\n<<Value Object>>\nApplicationStatus" as ASTATUS {
    - String: status
    ..
    + statusOfApplication()
    + toString()
}
Class "<<Domain>>\n<<Value Object>>\nJobReference" as JREF {
    - Integer: reference
    ..
    + jobOpeningRef()
    + toString()
}
Class "<<Persistence>>\n<<Repository>>\nApplicationRepository" as AREPO {
    + findAll()
    + findAllById(Iterable<Email>: emails)
    + findById(Email: email)
    + save(Entity: Entity)
}
Class "<<Presentation>>\nListCandidateDataUI" as UI {
    ..
    + doShow()
}
Class "<<Application>>\nListCandidateDataController" as CTRL {
    ..
    + listCandidates()
}
Interface "<<Persistentence>>\nDomainRepository" as DREPO {
    ..
    - findAll()
    - findAllById(Iterable<Email>: emails)
    - findById(Email: email)
    - save(Entity: Entity)
}
Interface "<<Presentation>>\nAbstractUI" as ABUI {
    ..
    - doShow()
}
Class "<<Persistence>>\n<<Repository>>\nCandidateRepository" as CREPO {
    ..
    + findAll()
    + findAllById(Iterable<Email>: emails)
    + findById(Email: email)
    + save(Entity: Entity)
}
Class "<<Domain>>\n<<Root Entity>>\nCandidate" as C {
    - CandidateName: name
    - Email: email
    - PhoneNumber: number
    ..
    + valueOfCandidateName()
    + valueOfEmail()
    + valueOfPhoneNumber()
    + toString()
}
Class "<<Domain>>\n<<Value Object>>\nCandidateName" as CNAME {
    - String: nameOfCandidate
    ..
    + valueOfCandidateName()
    + toString()
}
Class "<<Domain>>\n<<Value Object>>\nEmail" as CEMAIL {
    - String: emailOfCandidate
    ..
    + valueOfCandidateEmail()
    + toString()
}
Class "<<Domain>>\n<<Value Object>>\nPhoneNumber" as CPHONE {
    - Integer: phoneNumberOfCandidate
    ..
    + valueOfCandidatePhoneNumber()
    + toString()
}

C o-- CPHONE
C o-- CNAME
C o-- CEMAIL

CREPO ...|> DREPO: implements

AREPO ...|> DREPO: implements
AREPO <.. A: stored in

UI ...|> ABUI: implements
UI ...> CTRL
UI ..> DTO

CTRL ..> CREPO
CTRL ..> SERVICE

SERVICE --> CREPO
SERVICE --> C
SERVICE --> A
SERVICE --> AREPO
SERVICE ..> DTO

C ..> CREPO: stored in
C --> A: submits

A o-- ASTATUS
A o-- ADATE

J --> A: has
J o-- JREF
@enduml
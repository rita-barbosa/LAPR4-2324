@startuml

title US1013 Sequence Diagram

participant "<<presentation>>\n:ApplicationRankingUI" as UI
participant ":ApplicationFilePopUpWindow" as PopUp <<application>>
participant "<<application>>\n:ApplicationRankingController" as CTRL

participant "<<service>>\n:RecruitmentProcessManagementService" as RecruitSrv
participant "<<domain>>\n:RecruitmentProcess" as RecruitmentProcess
database "<<repository>>\n:RecruitmentProcessRepository" as RecruitmentProcessRepository

participant "<<service>>\n:JobOpeningManagementService" as JobSrv
database "<<repository>>\n:JobOpeningRepository" as JobOpeningRepository

participant "<<service>>\n:RankManagementService" as RankSrv
participant "<<domain>>\n:RankOrder" as RankOrder
database "<<repository>>\n:RankRepository" as RankRepository

participant "<<service>>\n:ApplicationListDTOService" as AppDTOSrv
participant "<<service>>\n:ApplicationManagementService" as AppSrv
database "<<repository>>\n:ApplicationRepository" as ApplicationRepository

autonumber

activate UI
'======= Get Job Openings of Customer =======
ref over UI
[shared-sequence-diagram]
sequence-diagram-get-job-openings
end ref
note right
The query in this reference is the only different
thing it retrieves only the active jobOpenings
(getCustomerManagerActiveJobOpenings(customerCode))
end note


UI -> UI : show()

'======= Check if Phase is Right =======

UI -> CTRL : getRankOrderList(jobReference)
activate CTRL

CTRL -> RecruitSrv : checkIfRecruitmentProcessIsInAnalysisPhase(jobReference)
activate RecruitSrv

RecruitSrv -> RecruitmentProcessRepository : getRecruitmentProcessByJobReference(jobReference)
activate RecruitmentProcessRepository
deactivate RecruitmentProcessRepository

RecruitSrv -> RecruitmentProcess : indicatePhaseByDate(currentDate)
note right
currentDate = LocalDate.now()
end note
activate RecruitmentProcess
RecruitmentProcess --> RecruitSrv : phase
deactivate RecruitmentProcess

alt phase.phaseType == ANALYSIS
RecruitSrv --> CTRL : true
end alt
deactivate RecruitSrv

'======= Get Rank Order/Applications =======
CTRL -> RankSrv : getRank(jobReference)
activate RankSrv

RankSrv -> RankRepository : getRankFromJobReference(jobReference)
activate RankRepository
deactivate RankRepository

loop for all rankOrders
    RankSrv -> RankOrder : toDTO()
    activate RankOrder
    deactivate RankOrder
end loop

RankSrv --> CTRL : rankListDTO
deactivate RankSrv

alt rankListDTO.size == 0
    CTRL -> JobSrv : getApplications(jobReference)
    activate JobSrv
        JobSrv -> JobOpeningRepository : getApplicationsFromJobReference(jobReference)
        activate JobOpeningRepository
        deactivate JobOpeningRepository

        JobSrv -> AppDTOSrv : convertApplicationsToDTO(applicationsList)
        activate AppDTOSrv
        deactivate AppDTOSrv

        JobSrv --> CTRL : applicationsListDTO
    deactivate JobSrv

    CTRL --> UI : applicationsListDTO

else rankListDTO.size > 0

    CTRL --> UI : rankListDTO
    deactivate CTRL
end alt

UI -> UI : show()

'======= Show Application Files =======
opt user chooses to see application files
UI -> UI : seeApplicationFileInWindow(applicationDTO, filename)
activate UI
UI -> CTRL : getApplicationFile(applicationDTO, filename)
activate CTRL

    CTRL -> AppSrv : getApplicationFileContent(applicationDTO, filename)
    activate AppSrv

        AppSrv -> ApplicationRepository : getApplicationFromDTO(applicationDTO)
        activate ApplicationRepository
        deactivate ApplicationRepository

        loop for all application files
            AppSrv --> AppSrv : applicationFile.name().equals(filename)
            note right
            files are loop until finding one
            that has the same file name
            end note
        end loop

        AppSrv --> CTRL : applicationFileContent
    deactivate AppSrv

    CTRL --> UI : applicationFileContent
    deactivate CTRL

    UI -> PopUp** : create(applicationFileContent)
    deactivate UI
    activate PopUp
        PopUp -> PopUp : show()
        autonumber stop
        PopUp -[#white]> PopUp
    deactivate PopUp
    |||
end opt

autonumber resume

'======= Update Application Rank =======
UI -> CTRL : updateRanking(applicationDTO, score)
activate CTRL

    CTRL -> RankSrv : updateRanking(applicationDTO, score)
    deactivate CTRL
    activate RankSrv

    RankSrv -> AppSrv : getApplicationFromDTO(applicationDTO)
    activate AppSrv

        AppSrv -> ApplicationRepository : getApplicationFromDTO(applicationDTO)
        activate ApplicationRepository
        deactivate ApplicationRepository

    deactivate AppSrv


    RankSrv -> RankOrder : create(application, score)

    RankSrv -> RankSrv : incrementRankOrderSinceScore(score)
    activate RankSrv

    RankSrv -> RankOrder : create(application, score)
    activate RankOrder
    deactivate RankOrder

    RankSrv -> RankRepository : save(RankOrder)
    deactivate RankSrv
    activate RankRepository
        autonumber stop
        RankRepository -[#white]> RankRepository
    deactivate RankRepository

    alt score != 1
autonumber resume
    RankSrv -> RankSrv : decrementRankOrderUntilScore(score)
    activate RankSrv

        RankSrv -> RankOrder : create(application, score)
        activate RankOrder
        deactivate RankOrder

        RankSrv -> RankRepository : save(RankOrder)
    deactivate RankSrv
    activate RankRepository
        autonumber stop
        RankRepository -[#white]> RankRepository
        |||
    deactivate RankRepository

    end alt

    autonumber resume
    RankSrv -> RankRepository : save(specificRankOrder)
    deactivate RankSrv
    activate RankRepository
        autonumber stop
        RankRepository -[#white]> RankRepository
    deactivate RankRepository

autonumber resume
'======= Exit - Check all Applications are Ranked =======
opt option = 0 ("exit")

UI -> CTRL : checkNeededApplicationsAreRanked(jobReference)
activate CTRL

    CTRL -> JobSrv : checkNeededApplicationsAreRanked(jobOpeningDTO)
    activate JobSrv

        JobSrv -> JobOpeningRepository : getJobOpeningFromDTO(jobOpeningDTO)
        activate JobOpeningRepository
        deactivate JobOpeningRepository

        JobSrv -> RankSrv : checkNeededApplicationsAreRanked(applicationsList, numberVacancies)
        activate RankSrv

            loop for (numberVacancies + (n * numberVacancies))
                RankSrv -> RankRepository : getRankOrderAssociated(application)
                 note right
                    Where **n** is the number
                    defined in the system
                    configuration
                end note
                activate RankRepository
                deactivate RankRepository

                alt score > 0
                    RankSrv --> RankSrv : true
                end alt

            end loop


           RankSrv --> JobSrv : true
        deactivate RankSrv

        JobSrv --> CTRL : true
    deactivate JobSrv

    CTRL --> UI : all ranked

deactivate CTRL

end opt

deactivate UI

@enduml
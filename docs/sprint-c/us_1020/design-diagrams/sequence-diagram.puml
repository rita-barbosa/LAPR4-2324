@startuml
'https://plantuml.com/sequence-diagram

title US1020 - Sequence Diagram

autonumber

actor "Customer Manager" as USER
participant ":PublishResultJobOpeningUI" as UI <<presentation>>
participant ":PublishResult\nJobOpeningController" as CTRL <<application>>
participant ":AuthorizationService" as AUTHZ <<service>>
database ":RankRepository" as R_REPO <<repository>>
participant ":RankOrder" as R <<domain>>
participant ":Application" as A <<domain>>
database ":ApplicationRepository" as A_REPO <<repository>>
participant ":ApplicationAcceptedEvent" as NAAE <<domain event>>
participant ":ApplicationStatusChangedEvent" as ASCE <<domain event>>
participant ":JobOpeningResults\nPublishedEvent" as JORPE <<domain event>>
participant ":EventPublisher" as EP <<interface>>


activate USER

USER -> UI : asks to publish results for job opening
activate UI

UI -> CTRL**: create

UI -> CTRL : getJobOpeningList()
activate CTRL

ref over CTRL

Check **sequence-diagram-job-opening-in-result**

end ref

CTRL --> UI: jobOpeningListDTO
deactivate CTRL

UI --> USER : displays the job openings and asks to select one
deactivate UI


USER -> UI : selects job opening
activate UI

    UI -> CTRL: publishResultForJobOpening(jobOpeningDto)
    activate CTRL

    CTRL -> AUTHZ:  loggedinUserWithPermissions(roles)
    activate AUTHZ
    deactivate AUTHZ

    CTRL -> CTRL : publishResults(jobOpeningDto,customerManagerEmail)
    activate CTRL

        CTRL -> R_REPO: ofIdentity(jobReference)
        activate R_REPO
        deactivate R_REPO



            loop for each RankOrder

                alt if orderValue <= numVacancies

                    CTRL -> R : acceptApplication()
                    activate R

                    R -> A : acceptApplication()
                    activate A
                    deactivate A
                    deactivate R

                    CTRL -> NAAE**: create(customerManagerEmail, candidateEmail, jobReference)
                    CTRL -> EP: publish(applicationAcceptedEvent)
                    activate EP
                    deactivate EP

                    CTRL -> A_REPO: save(application)
                    activate A_REPO
                    deactivate A_REPO
                else if orderValue > numVacancies

                    CTRL -> R : rejectApplication()
                    activate R

                    R -> A : rejectApplication()
                    activate A
                    deactivate A
                    deactivate R

                    CTRL -> A_REPO: save(application)
                    activate A_REPO
                    deactivate A_REPO
                end alt



               CTRL -> ASCE** : create(candidateEmail, jobReference, newStatus)
                CTRL-> EP: publish(applicationStatusChangedEvent)
                activate EP
                deactivate EP
            end loop


    CTRL-> JORPE**: create(customerManagerEmail, acceptedCandidateList, companyCode, jobReference)
    CTRL -> EP: publish(jobOpeningResultsPublishedEvent)
    activate EP
    deactivate EP


    CTRL --> CTRL:
    deactivate CTRL

CTRL --> UI: success
deactivate CTRL

UI --> USER: displays success

deactivate USER


@enduml
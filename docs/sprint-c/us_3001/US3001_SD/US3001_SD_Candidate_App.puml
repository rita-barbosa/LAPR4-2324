@startuml
'https://plantuml.com/sequence-diagram

autonumber
actor "Candidate" as ACTOR
participant "<<Presentation>>\nNotificationInboxCandidateUI" as UI
participant "<<Application>>\nNotificationInboxCandidateController" as CTRL
participant "<<Service>>\nFollowUpConnectionService" as SERVICE
participant "<<Thread>>\nClientConnectionThread" as CLITHREAD
participant "<<Thread>>\nCheckForNotificationsThread" as THREAD

activate ACTOR

    ACTOR -> UI : asks to see the\n notification inbox

    activate UI

        ref over UI, CLITHREAD
        connection to the server in
        sequence-diagram-tcp-connection.puml
        in team-decisions directory
        end

        UI -> CTRL : startCheckForNotificationsThread(username)

        activate CTRL

            CTRL -> THREAD** : create(username)

            CTRL -> THREAD : start()

            activate THREAD

                THREAD -> THREAD : run()

                loop

                    THREAD -> SERVICE : checkForNotifications(username)

                    activate SERVICE

                        SERVICE --> THREAD : answer

                    deactivate SERVICE

                    alt if answer is true

                        THREAD --> ACTOR : show message indicating it has new notifications
                    end

                    THREAD --> THREAD : wait(30000)

                end

        deactivate CTRL

        opt Option 1 (Notifications to be seen)

            UI -> CTRL : getAllUnseenNotifications(username)

            activate CTRL

                CTRL -> SERVICE : receiveUnseenNotificationList(username.toString())

                activate SERVICE

                   SERVICE -> SERVICE : byte[] message = dataDTO.toByteArray();

                   SERVICE -> CLITHREAD : sOut.writeInt(message.length)

                   activate CLITHREAD

                   deactivate CLITHREAD

                   SERVICE -> CLITHREAD : sOut.write(message)

                   activate CLITHREAD

                   deactivate CLITHREAD

                   SERVICE -> CLITHREAD : sOut.flush()

                   activate CLITHREAD

                   deactivate CLITHREAD

                   SERVICE --> CTRL : unseenNotificationList

                deactivate SERVICE

                CTRL --> UI : unseenNotificationList

                alt empty unseenNotificationList

                    UI --> ACTOR : show it has \nno new notifications

                else not empty unseenNotificationList

                    UI --> ACTOR : shows all notifications

                end

            deactivate CTRL

        else Option 2 (Notifications already seen)

            UI --> ACTOR : asks from when should it show the notifications

            ACTOR -> UI : date

            UI -> CTRL : getAllSeenNotifications(username, date)

            activate CTRL
                            CTRL -> SERVICE : receiveSeenNotificationList(username.toString())

                            activate SERVICE
                               SERVICE -> SERVICE : byte[] message = dataDTO.toByteArray();

                               SERVICE -> CLITHREAD : sOut.writeInt(message.length)

                               activate CLITHREAD

                               deactivate CLITHREAD

                               SERVICE -> CLITHREAD : sOut.write(message)

                               activate CLITHREAD

                               deactivate CLITHREAD

                               SERVICE -> CLITHREAD : sOut.flush()

                               activate CLITHREAD

                               deactivate CLITHREAD

                               SERVICE --> CTRL : seenNotificationList

                            deactivate SERVICE

                            CTRL --> UI : seenNotificationList

                            alt empty seenNotificationList

                                UI --> ACTOR : show it has \nno new notifications

                            else not empty seenNotificationList

                                UI --> ACTOR : shows all notifications

                            end

                        deactivate CTRL

        else Option 3 (Exit)
            UI -> CTRL : closeCheckNotificationsThread()

            activate CTRL

                CTRL -> THREAD : interrupt()

                CTRL -> THREAD : join()

                deactivate THREAD

            deactivate CTRL

            UI -> CTRL : closeConnection()

            CTRL --> UI : response

            UI -> UI : doShow()

            UI --> ACTOR : response

        end

    deactivate UI

deactivate ACTOR

@enduml